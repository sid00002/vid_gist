// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int @id @default(autoincrement())
  name      String @db.VarChar(191)
  email     String @db.VarChar(191) @unique
  image     String?
  oauth_id  String
  provider  String @db.VarChar(191)
  coins     Int @default(50)
  created_at DateTime @default(now())
  summary   Summary[]
  transactions Transactions[]
  coinsSpend   CoinsSpend[]

@@map("users")
}


model Summary {
  id           String @id @db.Uuid @default(uuid())
  user_id      Int
  user         User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  title        String
  url          String
  response     String?
  created_at   DateTime @default(now())
  coinsSpend   CoinsSpend[]

  @@map("summary")
  @@index([url, created_at])

}

model Transactions {
  id           String @id @db.Uuid @default(uuid())
  user_id      Int
  user         User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  amount       Int
  status       Int @db.SmallInt
  created_at   DateTime @default(now())

  @@map("transactions")
}

model CoinsSpend {
  id             Int @id @default(autoincrement())
  user_id        Int
  user           User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  summary_id     String @db.Uuid
  summary        Summary @relation(fields: [summary_id], references: [id], onDelete: Cascade)
  created_at     DateTime @default(now())

  @@map("coins_spend")
}